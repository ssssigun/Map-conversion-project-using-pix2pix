# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EYa4AkvMPxuTCpU9XAtkH5q7qq2iRy35
"""

#app.py
from flask import Flask, flash, request, redirect, url_for, render_template
import urllib.request
import os
from werkzeug.utils import secure_filename
from keras.models import load_model
import psycopg2 
import psycopg2.extras
from PIL import Image
import numpy as np
#import cv2 
from tensorflow.keras.optimizers import Adam
from matplotlib import pyplot as plt

app = Flask(__name__)
     
app.secret_key = "secret_key"
     
DB_HOST = "DB_HOST"
DB_NAME = "DB_NAME"
DB_USER = "DB_USER"
DB_PASS = "DB_PASS"
DB_PORT = "DB_PORT"

conn = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASS,port=DB_PORT)
  
UPLOAD_FOLDER = 'static/uploads/'
PREDICT_FOLDER = 'static/predicts/'
MODEL_FOLDER ='models/'
app.secret_key = "secret key"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['PREDICT_FOLDER'] = PREDICT_FOLDER
app.config['MODEL_FOLDER'] = MODEL_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024
  
ALLOWED_EXTENSIONS = set(['png', 'jpg', 'jpeg', 'gif'])
  
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
      
    
@app.route('/')
def home():
    return render_template('index.html')
  
@app.route('/', methods=['POST'])
def upload_image():
    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
 
    if 'file' not in request.files:
        flash('No file part')
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        flash('No image selected for uploading')
        return redirect(request.url)
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        #print('upload_image filename: ' + filename)
        
        img = np.array(Image.open(os.path.join(app.config['UPLOAD_FOLDER'], filename)))
        #img = cv2.resize(img,(256,256),interpolation = cv2.INTER_CUBIC)
        img = (img - 127.5) / 127.5
        img_p= np.expand_dims(img,axis=0)
        
        model = load_model(os.path.join(app.config['MODEL_FOLDER'], "model_109600.h5"))
        gen_image = model.predict(img_p)
        gen_image = (gen_image + 1) / 2.0
        plt.imsave(os.path.join(app.config['PREDICT_FOLDER'], filename), gen_image[0])
        
        
        try:
            cursor.execute("INSERT INTO upload (title) VALUES (%s)", (filename,))
            conn.commit()
        except:
            conn.rollback()
            
        flash('Image successfully uploaded and converted')
        return render_template('index.html', filename=filename)
    else:
        flash('Allowed image types are - png, jpg, jpeg, gif')
        return redirect(request.url)
    

    
if __name__ == "__main__":
    app.run()



